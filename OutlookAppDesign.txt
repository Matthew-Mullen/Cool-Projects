Outlook application design file (Assuming Python design but could be done in other languages)

Step 1: I found on stack overflow a similar idea to that of which I had with the DataBase class I showed you yesterday in that Java project.
It is called pyOutlook. This is a module that simplifies the interaction between the developer and the outlook api.
It does this by having a central OutLookAccount object that has various methods including sendemail, getinbox etc.
These methods parse the json files that outlook api sends into objects which have properties including message body, subject, sender etc.
The Outlook account object only requires an oauth access token which is generated as described below. 


Step 2 : acquire OAuth token in order to access account using the script.
This must be done by registering the script on https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Quickstart/appId/b9daf6d6-b7f8-46b8-a21d-4b689bd61896/objectId/a8b2208b-54fd-4fae-84d0-f6ec8a042104/isMSAApp/true/defaultBlade/Overview/appSignInAudience/PersonalMicrosoftAccount
Then you can use python-oauth2 to generate an access token.

Step 3: Now for the actual application we want to design:
    step 1: fetch oauth access token using the above module after granting permissions using the link above.
    step 2: instantiate OutLookAccount object with a string argument with the string argument being the access token generated previous.
    as a note for the next step you can choose the inbox (sent, draft, normal inbox etc)
    step 3: read inbox (in this module it loads the first ten emails however this could be adjusted rather easily to include more emails I'd go with 1000) 
    step 4: read inbox returns a list of email objects where each email will have properties such as date sent
    step 5: initialize counter to 0
    step 6: iterate over read inbox list and increment upon seeing an email having a date difference between current date and date sent of <=7 days and that have "RE:" as the first 3 characters of the subject.
    step 7: obviously this above could generate some bugs but this keeps it simple in a real situation I would read in more detail about determining if an email is a reply.
    step 8: Things to consider that I am unclear about (Are we looking for unique reply people? As in I could send you 3 emails in one week and you reply 3 times do we count that as 1 or 3)
    step 9: iterate over inbox and for each email we sent that does not have a complement subject beginning with "RE:" that fit the first part of the criteria above to increment create an email object with an appropriate body/subject and call the Account.send() to send the email
    step 10: that is it.
